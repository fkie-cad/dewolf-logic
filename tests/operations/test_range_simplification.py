"""Module implementing tests for range simplification."""
import pytest

from simplifier.range_simplifier import RangeSimplifier
from simplifier.world.world import World


def check_range_simplification(input_operation: str, output_operation: str):
    w = World()
    operation = w.from_string(input_operation)
    var = w.variable("v", 1)
    w.define(var, operation)
    RangeSimplifier.simplify(operation)
    assert w.compare(var, w.from_string(output_operation))


@pytest.mark.parametrize(
    "test, result",
    [
        ("(u<= 3@4 a@4 2@4)", "0@1"),
        ("(s<= 3@4 a@4 2@4)", "0@1"),
        ("(u> 1@4 3@4)", "0@1"),
        ("(s> 1@4 3@4)", "0@1"),
        ("(u> 3@4 1@4)", "1@1"),
        ("(s> 3@4 1@4)", "1@1"),
        ("(u< 1@4 3@4)", "1@1"),
        ("(s< 1@4 3@4)", "1@1"),
        ("(u< 3@4 1@4)", "0@1"),
        ("(s< 3@4 1@4)", "0@1"),
        ("(u< 1@4 1@4)", "0@1"),
        ("(s< 1@4 1@4)", "0@1"),
        ("(u< 1@4 1@4)", "0@1"),
        ("(s< 1@4 1@4)", "0@1"),
        ("(u<= 1@4 1@4)", "1@1"),
        ("(s<= 1@4 1@4)", "1@1"),
        ("(u<= 1@4 1@4)", "1@1"),
        ("(s<= 1@4 1@4)", "1@1"),
        ("(== 3@4 1@4)", "0@1"),
        ("(== 3@4 3@4)", "1@1"),
        ("(== 3@4 a@4 2@4)", "0@1"),
        ("(!= 3@4 1@4)", "1@1"),
        ("(!= 3@4 a@4 3@4)", "0@1"),
        ("(!= 3@4 3@4)", "0@1"),
        ("(== a@4 a@4)", "1@1"),
        ("(== a@4 b@4)", "(== a@4 b@4)"),
        ("(!= a@4 b@4)", "(!= a@4 b@4)"),
        ("(== a@4 3@4)", "(== a@4 3@4)"),
        ("(!= a@4 3@4)", "(!= a@4 3@4)"),
    ],
)
def test_constant_comparison_simplification(test, result):
    check_range_simplification(test, result)


@pytest.mark.parametrize(
    "test",
    [
        "(u< a@3 0@3)",
        "(u< 7@3 a@3)",
        "(s< a@3 -4@3)",
        "(s< 3@3 a@3)",
        "(u> 0@3 a@3)",
        "(u> a@3 7@3)",
        "(s> -4@3 a@3)",
        "(s> a@3 3@3)",
        "(u< a@3 0@3 b@3 3@3)",
        "(u< 2@3 b@3 7@3 a@3)",
        "(s> 0@3 b@3 -4@3 a@3)",
        "(s> a@3 3@3 b@3 1@3)",
        "(& (s< 3@3 a@3) (s< a@3 4@3))",
    ],
)
def test_comparison_empty_range(test):
    check_range_simplification(test, "0@1")


@pytest.mark.parametrize(
    "test",
    [
        "(u< 0@3 a@3)",
        "(u< a@3 7@3)",
        "(s< -4@3 a@3)",
        "(s< a@3 3@3)",
        "(s< a@4 0@4)",
        "(u< 3@4 a@4)",
        "(s> a@4 0@4)",
        "(u> a@3 0@3)",
        "(u> 7@3 a@3)",
        "(s> a@3 -4@3)",
        "(s> 3@3 a@3)",
        "(& (== a@3 1@3) (== b@3 2@3))",
        "(& (== a@3 1@3) (== b@3 c@3))",
        "(& (== a@3 1@3) (!= a@3 c@3))",
        "(& (!= a@3 1@3) (!= a@3 c@3))",
        "(& (== b@3 1@3) (s>= -1@3 a@3 ))",
        "(& (== b@3 1@3) (s>= a@3 2@3 ))",
        "(& (== b@3 1@3) (s<= 2@3 a@3 ))",
        "(& (== b@3 1@3) (s<= a@3 0@3 ))",
        "(& (== b@3 2@3) (u>= 1@3 a@3 ))",
        "(& (== b@3 2@3) (u>= a@3 4@3 ))",
        "(& (== b@3 2@3) (u<= 4@3 a@3 ))",
        "(& (== b@3 2@3) (u<= a@3 1@3 ))",
    ],
)
def test_comparison_do_nothing(test):
    check_range_simplification(test, test)


@pytest.mark.parametrize(
    "test",
    [
        "(u<= 0@3 a@3)",
        "(u<= a@3 7@3)",
        "(s<= -4@3 a@3)",
        "(s<= a@3 3@3)",
        "(u>= a@3 0@3)",
        "(u>= 7@3 a@3)",
        "(s>= a@3 -4@3)",
        "(s>= 3@3 a@3)",
        "(u<= 0@3 a@3 7@3)",
        "(s<= -4@3 a@3 3@3)",
        "(u>= 7@3 a@3 0@3)",
        "(s>= 3@3 a@3 -4@3)",
        "(| (== a@3 1@3) (!= 1@3 a@3))",
        "(| (== a@3 1@3) (!= 1@3 a@3) (& b@1 c@1))",
        "(| (== a@3 0@3) (u< 0@3 a@3))",
        "(| (== a@3 0@3) (u<= 0@3 a@3))",
        "(| (== a@3 -4@3) (s< -4@3 a@3))",
        "(| (u< 4@3 a@3) (u<= a@3 4@3) (& b@3 c@3))",
    ],
)
def test_comparison_always_true(test):
    check_range_simplification(test, "1@1")


@pytest.mark.parametrize(
    "test, result",
    [
        ("(u<= 0@3 a@3 5@3)", "(u<= a@3 5@3)"),
        ("(u<= 3@3 a@3 7@3)", "(u<= 3@3 a@3)"),
        ("(s<= -4@3 a@3 2@3)", "(s<= a@3 2@3)"),
        ("(s<= -1@3 a@3 3@3)", "(s<= -1@3 a@3)"),
        ("(u>= 5@3 a@3 0@3)", "(u>= 5@3 a@3 )"),
        ("(u>= 7@3 a@3 3@3)", "(u>= a@3 3@3 )"),
        ("(s>= 2@3 a@3 -4@3)", "(s>= 2@3 a@3 )"),
        ("(s>= 3@3 a@3 -1@3)", "(s>= a@3 -1@3 )"),
        ("(& (== a@3 1@3) (== a@3 1@3))", "(== a@3 1@3)"),
        ("(& (== a@3 1@3) (== 1@3 a@3))", "(== a@3 1@3)"),
        ("(& (== a@3 1@3) (!= 2@3 a@3))", "(== a@3 1@3)"),
        ("(& (== a@3 1@3) (s>= 1@3 a@3))", "(== a@3 1@3)"),
        ("(& (== a@3 1@3) (s>= a@3 -1@3))", "(== a@3 1@3)"),
        ("(& (== a@3 1@3) (s<= 1@3 a@3))", "(== a@3 1@3)"),
        ("(& (== a@3 1@3) (s<= a@3 3@3))", "(== a@3 1@3)"),
        ("(& (== a@3 2@3) (u>= 2@3 a@3))", "(== a@3 2@3)"),
        ("(& (== a@3 2@3) (u>= a@3 0@3))", "(== a@3 2@3)"),
        ("(& (== a@3 2@3) (u<= 2@3 a@3))", "(== a@3 2@3)"),
        ("(& (== a@3 2@3) (u<= a@3 5@3))", "(== a@3 2@3)"),
        ("(& (s>= 1@3 a@3) (s>= 2@3 a@3))", "(s>= 1@3 a@3)"),
        ("(& (s<= 1@3 a@3) (s>= a@3 2@3))", "(s>= a@3 2@3 )"),
        ("(& (s<= 1@3 a@3) (s<= -2@3 a@3))", "(s<= 1@3 a@3)"),
        ("(& (s>= 2@3 a@3) (s<= a@3 -1@3))", "(s<= a@3 -1@3 )"),
        ("(& (u<= a@3 5@3) (u>= 1@3 a@3 ))", "(u>= 1@3 a@3)"),
        ("(& (u<= 2@3 a@3) (u<= 4@3 a@3))", "(u<= 4@3 a@3)"),
        ("(& (u>= a@3 5@3) (u<= 3@3 a@3))", "(u>= a@3 5@3)"),
        ("(& (u<= a@3 4@3) (u<= a@3 5@3))", "(u<= a@3 4@3)"),
        ("(& (s>= 2@3 a@3) (s<= a@3 -1@3) (s>= a@3 -3@3))", "(& (s<= a@3 -1@3 ) (s>= a@3 -3@3))"),
        ("(& (u<= a@3 5@3) (u<= 1@3 a@3) (u>= 3@3 a@3))", "(& (u<= 1@3 a@3) (u>= 3@3 a@3))"),
        ("(& (s> 1@3 a@3) (s> 2@3 a@3))", "(s>= 0@3 a@3)"),
        ("(& (s< 0@3 a@3) (s> a@3 1@3))", "(s>= a@3 2@3 )"),
        ("(& (s< 1@3 a@3) (s<= -2@3 a@3))", "(s<= 2@3 a@3)"),
        ("(& (s> 2@3 a@3) (s<= a@3 -2@3))", "(s<= a@3 -2@3 )"),
        ("(& (u< a@3 5@3) (u> 2@3 a@3 ))", "(u>= 1@3 a@3)"),
        ("(& (u< 2@3 a@3) (u< 4@3 a@3))", "(u<= 5@3 a@3)"),
        ("(& (u> a@3 5@3) (u<= 6@3 a@3))", "(u>= a@3 6@3)"),
        ("(& (u< a@3 4@3) (u<= a@3 5@3))", "(u<= a@3 3@3)"),
        ("(& (s> 2@3 a@3) (s<= a@3 -1@3) (s> a@3 -3@3))", "(& (s<= a@3 -1@3 ) (s>= a@3 -2@3))"),
        ("(& (u<= a@3 5@3) (u< 1@3 a@3) (u> 4@3 a@3))", "(& (u<= 2@3 a@3) (u>= 3@3 a@3))"),
        ("(& (!= a@3 -1@3) (s>= a@3 1@3))", "(s>= a@3 1@3)"),
        ("(& (!= a@3 3@3) (s< a@3 3@3))", "(s<= a@3 2@3)"),
        ("(& (!= a@3 5@3) (u>= 2@3 a@3))", "(u>= 2@3 a@3)"),
        ("(& (!= a@3 2@3) (u< 2@3 a@3))", "(u<= 3@3 a@3)"),
        ("(& (s< -1@3 a@3) (!= a@3 -1@3) (s<= a@3 2@3))", "(& (s<= 0@3 a@3 ) (s<= a@3 2@3))"),
        ("(& (!= a@3 5@3) (u<= 2@3 a@3) (u< a@3 4@3))", "(& (u<= 2@3 a@3 ) (u<= a@3 3@3))"),
        ("(& (s< -1@3 a@3) (!= a@3 -1@3) (s<= a@3 2@3) (!= a@3 1@3))", "(& (s<= 0@3 a@3 ) (s<= a@3 2@3) (!= a@3 1@3))"),
        ("(& (!= a@3 7@3) (!= a@3 4@3) (u<= 2@3 a@3) (u< a@3 6@3))", "(& (u<= 2@3 a@3 ) (u<= a@3 5@3) (!= a@3 4@3))"),
    ],
)
def test_comparison_remove_redundant(test, result):
    check_range_simplification(test, result)


@pytest.mark.parametrize(
    "test, result",
    [
        ("(u<= 7@3 a@3)", "(== 7@3 a@3)"),
        ("(u<= a@3 0@3)", "(== a@3 0@3)"),
        ("(s<= 3@3 a@3)", "(== 3@3 a@3)"),
        ("(s<= a@3 -4@3)", "(== a@3 -4@3)"),
        ("(u>= 0@3 a@3)", "(== 0@3 a@3 )"),
        ("(u>= a@3 7@3)", "(== a@3 7@3 )"),
        ("(s>= -4@3 a@3)", "(== -4@3 a@3 )"),
        ("(s>= a@3 3@3)", "(== a@3 3@3 )"),
        ("(u< 6@3 a@3)", "(== 7@3 a@3)"),
        ("(u< a@3 1@3)", "(== a@3 0@3)"),
        ("(s< 2@3 a@3)", "(== 3@3 a@3)"),
        ("(s< a@3 -3@3)", "(== a@3 -4@3)"),
        ("(u> 1@3 a@3)", "(== 0@3 a@3 )"),
        ("(u> a@3 6@3)", "(== a@3 7@3 )"),
        ("(s> -3@3 a@3)", "(== -4@3 a@3 )"),
        ("(s> a@3 2@3)", "(== a@3 3@3 )"),
        ("(& (s<= 1@3 a@3) (s<= a@3 1@3))", "(== a@3 1@3)"),
        ("(& (u< 3@3 a@3) (u<= a@3 4@3))", "(== a@3 4@3)"),
        ("(& (s<= -1@3 a@3) (s< a@3 0@3))", "(== a@3 -1@3)"),
        ("(& (u< 2@3 a@3) (u< a@3 4@3))", "(== a@3 3@3)"),
    ],
)
def test_comparison_one_possible_value(test, result):
    check_range_simplification(test, result)


@pytest.mark.parametrize(
    "test",
    [
        "(& (== a@3 1@3) (== a@3 2@3))",
        "(& (== a@3 1@3) (== 2@3 a@3))",
        "(& (== a@3 1@3) (== 1@3 a@3) (== a@3 2@3))",
        "(& (== a@3 1@3) (!= 1@3 a@3 ))",
        "(& (== a@3 1@3) (!= a@3 1@3 ))",
        "(& (== a@3 1@3) (s>= -1@3 a@3 ))",
        "(& (== a@3 1@3) (s>= a@3 2@3 ))",
        "(& (== a@3 1@3) (s<= 2@3 a@3 ))",
        "(& (== a@3 1@3) (s<= a@3 0@3 ))",
        "(& (== a@3 2@3) (u>= 1@3 a@3 ))",
        "(& (== a@3 2@3) (u>= a@3 4@3 ))",
        "(& (== a@3 2@3) (u<= 4@3 a@3 ))",
        "(& (== a@3 2@3) (u<= a@3 1@3 ))",
        "(& (== a@3 -3@3) (s> a@3 -2@3 ))",
        "(& (== a@3 1@3) (s> 1@3 a@3))",
        "(& (== a@3 2@3) (s< a@3 1@3 ))",
        "(& (== a@3 -2@3) (s< -2@3 a@3))",
        "(& (== a@3 2@3) (u> a@3 3@3 ))",
        "(& (== a@3 2@3) (u> 2@3 a@3))",
        "(& (== a@3 6@3) (u< a@3 3@3 ))",
        "(& (== a@3 1@3) (u< 5@3 a@3))",
        "(& (s>= a@3 1@3) (s>= -1@3 a@3 ))",
        "(& (u<= a@3 2@3) (u<= 4@3 a@3 ))",
        "(& (s> a@3 -1@3) (s> -1@3 a@3 ))",
        "(& (u< a@3 5@3) (u< 4@3 a@3 ))",
        "(| (u< a@3 0@3) (u< 7@3 a@3 ))",
    ],
)
def test_comparison_and_contradiction(test):
    check_range_simplification(test, "0@1")


@pytest.mark.parametrize(
    "test, result",
    [
        ("(& (!= 1@3 a@3) (s<= a@3 1@3))", "(s<= a@3 0@3)"),
        ("(& (!= 5@3 a@3) (u<= a@3 5@3))", "(u<= a@3 4@3)"),
        ("(& (!= -1@3 a@3) (s< a@3 0@3))", "(s<= a@3 -2@3)"),
        ("(& (!= a@3 0@3) (!= -1@3 a@3) (s< a@3 1@3))", "(s<= a@3 -2@3)"),
        ("(& (!= 3@3 a@3) (u< a@3 4@3))", "(u<= a@3 2@3)"),
        ("(& (!= 1@3 a@3) (s>= a@3 1@3))", "(s<= 2@3 a@3)"),
        ("(& (!= 5@3 a@3) (u>= a@3 5@3))", "(u>= a@3 6@3)"),
        ("(& (!= 5@3 a@3) (u>= a@3 4@3) (!= a@3 4@3))", "(u>= a@3 6@3)"),
        ("(& (!= -1@3 a@3) (s> a@3 -2@3))", "(s>= a@3 0@3)"),
        ("(& (!= 3@3 a@3) (u> a@3 2@3))", "(u<= 4@3 a@3)"),
        ("(& (!= 2@3 a@3) (s>= a@3 2@3))", "(== 3@3 a@3)"),
        ("(& (!= 6@3 a@3) (u> a@3 5@3))", "(== a@3 7@3)"),
        ("(& (!= -3@3 a@3) (s< a@3 -2@3))", "(== -4@3 a@3)"),
        ("(& (!= 1@3 a@3) (u<= a@3 1@3))", "(== a@3 0@3)"),
    ],
)
def test_update_bound_forbidden_values(test, result):
    check_range_simplification(test, result)


@pytest.mark.parametrize(
    "test, result",
    [
        ("(& (!= 1@3 a@3) (!= a@3 2@3))", "(& (!= 1@3 a@3) (!= a@3 2@3))"),
        ("(& (!= 1@3 a@3) (!= a@3 5@3))", "(& (!= 1@3 a@3) (!= a@3 5@3))"),
        ("(& (!= 1@3 a@3) (!= a@3 5@3) (!= 6@3 a@3))", "(& (!= 1@3 a@3) (!= a@3 5@3) (!= 6@3 a@3))"),
        ("(& (!= 1@4 a@4) (!= a@4 3@4) (!= 2@4 a@4))", "(~ (& (u<= 1@4 a@4) (u<= a@4 3@4)))"),
        ("(& (!= 1@3 a@3) (!= a@3 3@3) (!= 2@3 a@3))", "(s< a@3 1@3)"),
        (
            "(& (!= 1@5 a@5) (!= 5@5 a@5) (!= a@5 3@5) (!= 6@5 a@5) (!= 7@5 a@5) (!= 2@5 a@5))",
            "(& (~ (& (u<= 1@5 a@5) (u<= a@5 3@5))) (~ (& (u<= 5@5 a@5) (u<= a@5 7@5))))",
        ),
        ("(& (!= 1@4 a@4) (!= a@4 3@4) (!= 2@4 a@4) (!= 5@4 a@4))", "(& (~ (& (u<= 1@4 a@4) (u<= a@4 3@4))) (!= 5@4 a@4))"),
        ("(& (!= 1@3 a@3) (!= a@3 0@3) (!= 2@3 a@3))", "(u< 2@3 a@3)"),
        ("(& (!= a@3 6@3) (!= 7@3 a@3))", "(u< a@3 6@3)"),
    ],
)
def test_merge_consecutive_forbidden_values(test, result):
    check_range_simplification(test, result)


@pytest.mark.parametrize(
    "test, result",
    [
        ("(| (== 1@3 a@3) (s<= a@3 0@3))", "(s< a@3 2@3)"),
        ("(| (== 5@3 a@3) (u<= a@3 4@3))", "(u< a@3 6@3)"),
        ("(| (== 0@3 a@3) (s< a@3 0@3))", "(s< a@3 1@3)"),
        ("(| (== 4@3 a@3) (u< a@3 4@3))", "(u< a@3 5@3)"),
        ("(| (== 1@3 a@3) (s<= a@3 0@3) (& b@3 c@3))", "(| (s< a@3 2@3) (& b@3 c@3))"),
    ],
)
def test_update_bounds_values(test, result):
    check_range_simplification(test, result)


@pytest.mark.parametrize(
    "test, result",
    [
        ("(| (== 1@3 a@3) (== a@3 2@3))", "(| (== 1@3 a@3) (== a@3 2@3))"),
        ("(| (== 1@3 a@3) (== a@3 5@3))", "(| (== 1@3 a@3) (== a@3 5@3))"),
        ("(| (== 1@3 a@3) (== a@3 5@3) (== 6@3 a@3))", "(| (== 1@3 a@3) (== a@3 5@3) (== 6@3 a@3))"),
        ("(| (== 1@4 a@4) (== a@4 3@4) (== 2@4 a@4))", "(& (u<= 1@4 a@4) (u<= a@4 3@4))"),
        ("(| (== 1@4 a@4) (== a@4 3@4) (== 2@4 a@4) (& b@3 c@3))", "(| (& (u<= 1@4 a@4) (u<= a@4 3@4)) (& b@3 c@3))"),
        ("(| (== 1@3 a@3) (== a@3 3@3) (== 2@3 a@3))", "(s>= a@3 1@3)"),
        (
            "(| (== 1@5 a@5) (== 5@5 a@5) (== a@5 3@5) (== 6@5 a@5) (== 7@5 a@5) (== 2@5 a@5))",
            "(| (& (u<= 1@5 a@5) (u<= a@5 3@5)) (& (u<= 5@5 a@5) (u<= a@5 7@5)))",
        ),
        ("(| (== 1@4 a@4) (== a@4 3@4) (== 2@4 a@4) (== 5@4 a@4))", "(| (& (u<= 1@4 a@4) (u<= a@4 3@4)) (== 5@4 a@4))"),
        ("(| (== 1@3 a@3) (== a@3 0@3) (== 2@3 a@3))", "(u>= 2@3 a@3)"),
        ("(| (== a@3 6@3) (== 7@3 a@3))", "(u>= a@3 6@3)"),
    ],
)
def test_merge_consecutive_allowed_values(test, result):
    check_range_simplification(test, result)


@pytest.mark.parametrize(
    "test, result",
    [
        ("(& (u> x@8 2@8) (u< x@8 1@8))", "0@1"),
        ("(& (u>= x@8 2@8) (== x@8 2@8))", "(== x@8 2@8)"),
        ("(& (u> x@8 4@8) (u> x@8 3@8))", "(u>= x@8 5@8)"),
        ("(| (== x@8 1@8) (u>= x@8 2@8))", "(!= x@8 0@8)"),
        ("(| (u> x@8 2@8) (u> x@8 3@8))", "(u> x@8 2@8)"),
        ("(| (== x@8 0@8) (== x@8 1@8) (== x@8 2@8) (== x@8 3@8) (== x@8 4@8) (== x@8 5@8))", "(u<= x@8 5@8)"),
    ],
)
def test_examples_of_issue(test, result):
    check_range_simplification(test, result)


@pytest.mark.parametrize(
    "test, result, numb_vertices",
    [
        ("(u<= 3@4 a@4 2@4)", "0@1", 2),
        ("(s<= 3@4 a@4 2@4)", "0@1", 2),
        ("(u> 3@4 1@4)", "1@1", 1),
        ("(s> 3@4 1@4)", "1@1", 1),
        ("(== a@4 3@4)", "(== a@4 3@4)", 3),
        ("(!= a@4 3@4)", "(!= a@4 3@4)", 3),
        ("(u< 2@3 b@3 7@3 a@3)", "0@1", 3),
        ("(& (s< 3@3 a@3) (s< a@3 4@3))", "0@1", 2),
        ("(s>= 3@3 a@3 -4@3)", "1@1", 2),
        ("(| (== a@3 1@3) (!= 1@3 a@3))", "1@1", 2),
        ("(& (u<= a@3 5@3) (u<= 1@3 a@3) (u>= 3@3 a@3))", "(& (u<= 1@3 a@3) (u>= 3@3 a@3))", 6),
        ("(& (s> 1@3 a@3) (s> 2@3 a@3))", "(s>= 0@3 a@3)", 3),
        ("(& (!= a@3 7@3) (!= a@3 4@3) (u<= 2@3 a@3) (u< a@3 6@3))", "(& (u<= 2@3 a@3 ) (u<= a@3 5@3) (!= a@3 4@3))", 8),
        ("(s> a@3 2@3)", "(== a@3 3@3 )", 3),
        ("(& (u< 3@3 a@3) (u<= a@3 4@3))", "(== a@3 4@3)", 3),
        ("(& (== a@3 1@3) (u< 5@3 a@3))", "0@1", 2),
        ("(& (s>= a@3 1@3) (s>= -1@3 a@3 ))", "0@1", 2),
        ("(| (u< a@3 0@3) (u< 7@3 a@3 ))", "0@1", 2),
        ("(& (!= 5@3 a@3) (u>= a@3 4@3) (!= a@3 4@3))", "(u>= a@3 6@3)", 3),
        ("(& (!= -1@3 a@3) (s> a@3 -2@3))", "(s>= a@3 0@3)", 3),
        ("(& (!= 1@3 a@3) (!= a@3 0@3) (!= 2@3 a@3))", "(u< 2@3 a@3)", 3),
        ("(& (!= 1@4 a@4) (!= a@4 3@4) (!= 2@4 a@4))", "(~ (& (u<= 1@4 a@4) (u<= a@4 3@4)))", 7),
        ("(| (== 4@3 a@3) (u< a@3 4@3))", "(u< a@3 5@3)", 3),
        ("(| (== 1@3 a@3) (s<= a@3 0@3) (& b@3 c@3))", "(| (s< a@3 2@3) (& b@3 c@3))", 7),
        ("(| (== 1@3 a@3) (== a@3 3@3) (== 2@3 a@3))", "(s>= a@3 1@3)", 3),
        (
            "(| (== 1@5 a@5) (== 5@5 a@5) (== a@5 3@5) (== 6@5 a@5) (== 7@5 a@5) (== 2@5 a@5))",
            "(| (& (u<= 1@5 a@5) (u<= a@5 3@5)) (& (u<= 5@5 a@5) (u<= a@5 7@5)))",
            12,
        ),
        ("(| (== 1@4 a@4) (== a@4 3@4) (== 2@4 a@4) (== 5@4 a@4))", "(| (& (u<= 1@4 a@4) (u<= a@4 3@4)) (== 5@4 a@4))", 9),
    ],
)
def test_check_clean_up_works(test, result, numb_vertices):
    w = World()
    operation = w.from_string(test)
    var = w.variable("v", 1)
    w.define(var, operation)
    RangeSimplifier.simplify(operation)
    cmp_w = World()
    assert World.compare(var, cmp_w.from_string(result)) and len(w) == numb_vertices + 1


@pytest.mark.parametrize(
    "test, result",
    [
        ("(& (u<= x@8 10@8) (s<= x@8 -3@8))", "0@1"),
        ("(& (u<= x@8 10@8) (s<= x@8 -128@8))", "0@1"),
        ("(& (u<= x@8 0@8) (s<= x@8 -3@8))", "0@1"),
        ("(& (u<= x@8 127@8) (s<= x@8 -3@8))", "0@1"),
        ("(& (u<= x@8 10@8) (s<= x@8 20@8))", "(u<= x@8 10@8)"),
        ("(& (u<= x@8 20@8) (s<= x@8 10@8))", "(u<= x@8 10@8)"),
        ("(& (u<= x@8 0@8) (s<= x@8 10@8))", "(== x@8 0@8)"),
        ("(& (u<= x@8 127@8) (s<= x@8 0@8))", "(== x@8 0@8)"),
        ("(& (u<= x@8 128@8) (s<= x@8 -5@8))", "(== x@8 -128@8)"),
        ("(& (u<= x@8 140@8) (s<= x@8 -5@8))", "(s<= x@8 -116@8)"),
        ("(& (u<= x@8 255@8) (s<= x@8 -128@8))", "(== x@8 -128@8)"),
        ("(& (u<= x@8 255@8) (s<= x@8 -12@8))", "(s<= x@8 -12@8)"),
        ("(& (u>= x@8 0@8) (s>= x@8 5@8))", "(s>= x@8 5@8)"),
        ("(& (u>= x@8 5@8) (s>= x@8 2@8))", "(s>= x@8 5@8)"),
        ("(& (u>= x@8 127@8) (s>= x@8 4@8))", "(== x@8 127@8)"),
        ("(& (u>= x@8 2@8) (s>= x@8 127@8))", "(== x@8 127@8)"),
        ("(& (u>= x@8 2@8) (s>= x@8 0@8))", "(s>= x@8 2@8)"),
        ("(& (u>= x@8 128@8) (s>= x@8 -5@8))", "(u>= x@8 -5@8)"),
        ("(& (u>= x@8 160@8) (s>= x@8 -1@8))", "(== x@8 -1@8)"),
        ("(& (u>= x@8 160@8) (s>= x@8 -4@8))", "(u>= x@8 -4@8)"),
        ("(& (u>= x@8 140@8) (s>= x@8 -120@8))", "(u>= x@8 140@8)"),
        ("(& (u>= x@8 255@8) (s>= x@8 -3@8))", "(== x@8 255@8)"),
        ("(& (u>= x@8 128@8) (s>= x@8 0@8))", "0@1"),
        ("(& (u>= x@8 160@8) (s>= x@8 127@8))", "0@1"),
        ("(& (u>= x@8 140@8) (s>= x@8 0@8))", "0@1"),
        ("(& (u>= x@8 255@8) (s>= x@8 5@8))", "0@1"),
        ("(& (u<= x@8 10@8) (s>= x@8 -3@8))", "(u<= x@8 10@8)"),
        ("(& (u<= x@8 10@8) (s>= x@8 -128@8))", "(u<= x@8 10@8)"),
        ("(& (u<= x@8 0@8) (s>= x@8 -3@8))", "(== x@8 0@8)"),
        ("(& (u<= x@8 127@8) (s>= x@8 -3@8))", "(u<= x@8 127@8)"),
        ("(& (u<= x@8 10@8) (s>= x@8 3@8))", "(& (u<= x@8 10@8) (u>= x@8 3@8))"),
        ("(& (u<= x@8 10@8) (s>= x@8 127@8))", "0@1"),
        ("(& (u<= x@8 5@8) (s>= x@8 3@8))", "(& (u<= x@8 5@8) (u>= x@8 3@8))"),
        ("(& (u<= x@8 127@8) (s>= x@8 0@8))", "(u<= x@8 127@8)"),
        ("(& (u<= x@8 128@8) (s>= x@8 5@8))", "(s>= x@8 5@8)"),
        ("(& (u<= x@8 160@8) (s>= x@8 0@8))", "(s>= x@8 0@8)"),
        ("(& (u<= x@8 160@8) (s>= x@8 4@8))", "(s>= x@8 4@8)"),
        ("(& (u<= x@8 140@8) (s>= x@8 120@8))", "(s>= x@8 120@8)"),
        ("(& (u<= x@8 255@8) (s>= x@8 3@8))", "(s>= x@8 3@8)"),
        ("(& (u<= x@8 255@8) (s>= x@8 127@8))", "(== x@8 127@8)"),
        ("(& (u>= x@8 10@8) (s<= x@8 -3@8))", "(s<= x@8 -3@8)"),
        ("(& (u>= x@8 10@8) (s<= x@8 -128@8))", "(== x@8 -128@8)"),
        ("(& (u>= x@8 0@8) (s<= x@8 -3@8))", "(s<= x@8 -3@8)"),
        ("(& (u>= x@8 127@8) (s<= x@8 -3@8))", "(s<= x@8 -3@8)"),
        ("(& (u>= x@8 128@8) (s<= x@8 5@8))", "(u>= x@8 128@8)"),
        ("(& (u>= x@8 160@8) (s<= x@8 0@8))", "(u>= x@8 160@8)"),
        ("(& (u>= x@8 160@8) (s<= x@8 4@8))", "(u>= x@8 160@8)"),
        ("(& (u>= x@8 140@8) (s<= x@8 120@8))", "(u>= x@8 140@8)"),
        ("(& (u>= x@8 255@8) (s<= x@8 127@8))", "(== x@8 255@8)"),
        ("(& (u>= x@8 128@8) (s<= x@8 -5@8))", "(s<= x@8 -5@8)"),
        ("(& (u>= x@8 160@8) (s<= x@8 -128@8))", "0@1"),
        ("(& (u>= x@8 160@8) (s<= x@8 -4@8))", "(& (s>= x@8 160@8) (s<= x@8 -4@8))"),
        ("(& (u>= x@8 255@8) (s<= x@8 -1@8))", "(== x@8 -1@8)"),
    ],
)
def test_range_simplification_mixed_signedness(test, result):
    check_range_simplification(test, result)


@pytest.mark.parametrize(
    "test, result",
    [
        ("(& (u<= x@8 1@8) (!= x@8 1@8) (!= x@8 0@8))", "0@1"),
        ("(& (u< x@8 1@8) (!= x@8 0@8))", "0@1"),
        ("(& (u> x@3 5@3) (!= x@3 6@3) (!= x@3 7@3))", "0@1"),
        ("(& (s< x@3 -2@3) (!= x@3 -3@3) (!= x@3 -4@3))", "0@1"),
        ("(& (s>= x@3 2@3) (!= x@3 2@3) (!= x@3 3@3))", "0@1"),
    ],
)
def test_range_simplification_out_of_bound(test, result):
    check_range_simplification(test, result)
